{"version":3,"sources":["Map.js","Check.js","Home.js","Timeline.js","serviceWorker.js","index.js","App.js"],"names":["Map","className","title","src","width","height","Check","frameborder","marginheight","marginwidth","Display","props","header","amount","Home","state","getCoronaVirusTimeLineData","a","fetch","result","json","resultJson","console","log","setState","timeline","getCoronaVirusData","results","this","setInterval","total_cases","total_recovered","total_unresolved","total_deaths","total_new_cases_today","total_new_deaths_today","total_active_cases","total_serious_cases","React","Component","Timeline","getDays","days","map","day","date","new_daily_cases","new_daily_deaths","total_recoveries","Boolean","window","location","hostname","match","ReactDOM","render","to","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y0MAgBeA,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAGA,4BAAQC,MAAM,aAAaC,IAAI,4EAA4EC,MAAM,MAAMC,OAAO,aCMvHC,MAbf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,gBAChB,6CAGA,4BAAQE,IAAI,oHAAoHC,MAAM,MAAMC,OAAO,OAAOE,YAAY,IAAIC,aAAa,IAAIC,YAAY,KAAvM,oB,iECPKC,EAAU,SAAAC,GACrB,OAAIA,EAAMC,QAAUD,EAAME,OAEtB,yBAAKZ,UAAU,qBACb,4BAAKU,EAAMC,QACX,6BACA,2BAAID,EAAME,SAIP,MA4EIC,E,2MAvEbC,MAAQ,G,EAQRC,2B,sBAA6B,8BAAAC,EAAA,sEACRC,MACjB,sDAFyB,cACvBC,EADuB,gBAIJA,EAAOC,OAJH,OAIvBC,EAJuB,OAK3BC,QAAQC,IAAI,uBAAwBF,GAEpC,EAAKG,SAAS,CACZC,SAAUJ,IARe,2C,EAY7BK,mB,sBAAqB,8BAAAT,EAAA,sEACAC,MACjB,qDAFiB,cACfC,EADe,gBAIIA,EAAOC,OAJX,OAIfC,EAJe,OAKnBC,QAAQC,IAAI,qBAAsBF,GAElC,EAAKG,SAAS,CACZG,QAASN,EAAWM,QAAQ,KARX,2C,mFAjBnBC,KAAKF,qBAELG,YAAYD,KAAKF,qBAAsB,O,+BA4BvC,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEA,qCAEA,yBAAKA,UAAU,kBAEf,kBAAC,EAAD,CAASW,OAAQ,cAAeC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQG,cACjF,kBAAC,EAAD,CAASlB,OAAQ,kBAAmBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQI,kBACrF,kBAAC,EAAD,CAASnB,OAAQ,mBAAoBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQK,mBACtF,kBAAC,EAAD,CAASpB,OAAQ,eAAgBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQM,gBAIlF,qCAEA,yBAAKhC,UAAU,kBAEf,kBAAC,EAAD,CAASW,OAAQ,wBAAyBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQO,wBAC3F,kBAAC,EAAD,CAAStB,OAAQ,yBAA0BC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQQ,0BAG5F,sCAEA,yBAAKlC,UAAU,kBAEf,kBAAC,EAAD,CAASW,OAAQ,qBAAsBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQS,qBACxF,kBAAC,EAAD,CAASxB,OAAQ,sBAAuBC,OAAQe,KAAKb,MAAMY,SAAWC,KAAKb,MAAMY,QAAQU,6B,GA/DhFC,IAAMC,W,QC0DVC,E,2MAtEbzB,MAAQ,G,EAKR0B,QAAU,a,qHAuBR,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cAChB,+CAEA,+BACE,+BACE,4BACE,oCACA,+CAEA,gDAEA,2CAEA,gDAEA,8CAIJ,+BAEEyC,EAAKC,KAAK,SAAAC,GAAG,OACX,wBAAI3C,UAAU,yBACd,4BAAK2C,EAAIC,MACT,4BAAKD,EAAIE,iBACT,4BAAKF,EAAIG,kBACT,4BAAKH,EAAId,aACT,4BAAKc,EAAII,kBACT,4BAAKJ,EAAIX,0B,GA3DFK,IAAMC,WCQTU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCQD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKtD,UAAU,cACX,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMuD,GAAG,IAAT,SAEF,yBAAKvD,UAAU,YACb,kBAAC,IAAD,CAAMuD,GAAG,YAAT,aAEF,yBAAKvD,UAAU,YACb,kBAAC,IAAD,CAAMuD,GAAG,SAAT,mBAEF,yBAAKvD,UAAU,YACb,kBAAC,IAAD,CAAMuD,GAAG,OAAT,SAMN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YDxCI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.4d8f099e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Map() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Corona Map\n        </p>\n        <iframe title=\"Corona Map\" src=\"https://www.google.com/maps/d/embed?mid=1TMOByi-En0vrRnxSiI3GqAh9rOaPe-zo\" width=\"80%\" height=\"800px\"></iframe>\n      </header>\n    </div>\n  );\n}\n\nexport default Map;","import React from 'react';\nimport './App.css';\n\nfunction Check() {\n  return (\n    <div className=\"App\">\n      <header className=\"Check-header\">\n        <p>\n          Check Symptoms\n        </p>\n        <iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfaGZObLVHKC7FfOnRM8kA8klKXQU3NA-mgruc-BA0UovDOVQ/viewform?embedded=true\" width=\"640\" height=\"2300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loadingâ€¦</iframe>\n      </header>\n    </div>\n  );\n}\n\nexport default Check;","import React from \"react\";\nimport \"./App.css\";\n\nexport const Display = props => {\n  if (props.header && props.amount) {\n    return (\n      <div className=\"Display-container\">\n        <h3>{props.header}</h3>\n        <hr></hr>\n        <p>{props.amount}</p>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nclass Home extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.getCoronaVirusData();\n    //this.getCoronaVirusTimeLineData();\n    setInterval(this.getCoronaVirusData(), 60000); // Time in milliseconds\n  }\n\n  getCoronaVirusTimeLineData = async () => {\n    let result = await fetch(\n      \"https://thevirustracker.com/timeline/map-data.json\"\n    );\n    let resultJson = await result.json();\n    console.log(\"the timeline data is\", resultJson);\n\n    this.setState({\n      timeline: resultJson\n    });\n  };\n\n  getCoronaVirusData = async () => {\n    let result = await fetch(\n      \"https://thevirustracker.com/free-api?global=stats\"\n    );\n    let resultJson = await result.json();\n    console.log(\"the json result is\", resultJson);\n\n    this.setState({\n      results: resultJson.results[0]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Corona Cases</p>\n\n          <h2>Total</h2>\n\n          <div className=\"Data-container\">\n\n          <Display header={\"Total Cases\"} amount={this.state.results && this.state.results.total_cases}/>\n          <Display header={\"Total Recovered\"} amount={this.state.results && this.state.results.total_recovered}/>\n          <Display header={\"Total Unresolved\"} amount={this.state.results && this.state.results.total_unresolved}/>\n          <Display header={\"Total Deaths\"} amount={this.state.results && this.state.results.total_deaths}/>\n          </div>\n\n\n          <h2>Daily</h2>\n\n          <div className=\"Data-container\">\n\n          <Display header={\"Total New Cases Today\"} amount={this.state.results && this.state.results.total_new_cases_today}/>\n          <Display header={\"Total New Deaths Today\"} amount={this.state.results && this.state.results.total_new_deaths_today}/>\n          </div>\n\n          <h2>Active</h2>\n\n          <div className=\"Data-container\">\n\n          <Display header={\"Total Active Cases\"} amount={this.state.results && this.state.results.total_active_cases}/>\n          <Display header={\"Total Serious Cases\"} amount={this.state.results && this.state.results.total_serious_cases}/>\n            </div>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport days from \"./dates.json\"\n\nclass Timeline extends React.Component {\n  state = {};\n\n  componentDidMount() {}\n\n\n  getDays = () => {\n    // console.log(\"the timeline is\", timeline);\n    // console.log(\"the timeline iteim is\", timeline.timelineitems);\n    // console.log(\"the timeline item 0 is\", timeline.timelineitems[0]);\n    // let days = timeline.timelineitems[0]\n\n    // let newDays = []\n    // let item = {}\n\n    // for (let day in days) {\n    //     item = days[day]\n    //     item.date = day\n    //     newDays.push(item)\n    //     console.log(\"the newdays is\", newDays)\n    // }\n  }\n\n  render() {\n\n\n\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Swedish Timeline</p>\n\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>New Daily Cases</th>\n\n                <th>New Daily Deaths</th>\n\n                <th>Total Cases</th>\n\n                <th>Total Recoveries</th>\n\n                <th>Total Deaths</th>\n              </tr>\n            </thead>\n\n            <tbody>\n\n             {days.map((day =>\n                <tr className=\"Daily-cases-container\">\n                <td>{day.date}</td>\n                <td>{day.new_daily_cases}</td>\n                <td>{day.new_daily_deaths}</td>\n                <td>{day.total_cases}</td>\n                <td>{day.total_recoveries}</td>\n                <td>{day.total_deaths}</td>\n                </tr>\n            ))}\n\n            </tbody>\n          </table>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Timeline;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Map from \"./Map.js\"\nimport Check from \"./Check.js\"\nimport Home from \"./Home.js\"\nimport Timeline from \"./Timeline.js\"\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"Nav-header\">\n            <div className=\"Nav-item\">\n              <Link to=\"\">Home</Link>\n            </div>\n            <div className=\"Nav-item\">\n              <Link to=\"timeline\">Timeline</Link>\n            </div>\n            <div className=\"Nav-item\">\n              <Link to=\"check\">Check Symptoms</Link>\n            </div>\n            <div className=\"Nav-item\">\n              <Link to=\"map\">Map</Link>\n            </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/map\">\n            <Map />\n          </Route>\n          <Route path=\"/timeline\">\n            <Timeline />\n          </Route>\n          <Route path=\"/check\">\n            <Check />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}"],"sourceRoot":""}