{"version":3,"sources":["Map.js","Check.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["Map","className","title","src","width","height","Check","frameborder","marginheight","marginwidth","Home","state","getCoronaVirusData","a","fetch","result","console","log","json","resultJson","setState","results","this","setInterval","total_cases","total_deaths","total_new_cases_today","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","to","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qQAgBeA,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAGA,4BAAQC,MAAM,aAAaC,IAAI,4EAA4EC,MAAM,MAAMC,OAAO,aCMvHC,MAbf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,gBAChB,6CAGA,4BAAQE,IAAI,oHAAoHC,MAAM,MAAMC,OAAO,OAAOE,YAAY,IAAIC,aAAa,IAAIC,YAAY,KAAvM,oB,iECoDOC,E,2MA1DbC,MAAQ,G,EAORC,mB,sBAAqB,8BAAAC,EAAA,sEACAC,MACjB,qDAFiB,cACfC,EADe,OAInBC,QAAQC,IAAI,gBAAiBF,GAJV,SAKIA,EAAOG,OALX,OAKfC,EALe,OAMnBH,QAAQC,IAAI,qBAAsBE,GAElC,EAAKC,SAAS,CACZC,QAASF,EAAWE,QAAQ,KATX,2C,mFAJnBC,KAAKV,qBACLW,YAAYD,KAAKV,qBAAsB,O,+BAmBvC,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAECqB,KAAKX,MAAMU,SAAWC,KAAKX,MAAMU,QAAQG,aACxC,6BACE,2CACA,6BACA,4BAAKF,KAAKX,MAAMU,QAAQG,cAI3BF,KAAKX,MAAMU,SAAWC,KAAKX,MAAMU,QAAQI,cACxC,6BACE,4CACA,6BACA,4BAAKH,KAAKX,MAAMU,QAAQI,eAI3BH,KAAKX,MAAMU,SAAWC,KAAKX,MAAMU,QAAQK,uBACxC,6BACE,qDACA,6BACA,4BAAKJ,KAAKX,MAAMU,QAAQK,8B,GAjDnBC,IAAMC,WCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCOD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKlC,UAAU,cACX,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMmC,GAAG,KAAT,SAEF,yBAAKnC,UAAU,YACb,kBAAC,IAAD,CAAMmC,GAAG,UAAT,mBAEF,yBAAKnC,UAAU,YACb,kBAAC,IAAD,CAAMmC,GAAG,QAAT,SAMN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YDjCI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.17454974.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Map() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Corona Map\n        </p>\n        <iframe title=\"Corona Map\" src=\"https://www.google.com/maps/d/embed?mid=1TMOByi-En0vrRnxSiI3GqAh9rOaPe-zo\" width=\"80%\" height=\"800px\"></iframe>\n      </header>\n    </div>\n  );\n}\n\nexport default Map;","import React from 'react';\nimport './App.css';\n\nfunction Check() {\n  return (\n    <div className=\"App\">\n      <header className=\"Check-header\">\n        <p>\n          Check Symptoms\n        </p>\n        <iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSfaGZObLVHKC7FfOnRM8kA8klKXQU3NA-mgruc-BA0UovDOVQ/viewform?embedded=true\" width=\"640\" height=\"2300\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loadingâ€¦</iframe>\n      </header>\n    </div>\n  );\n}\n\nexport default Check;","import React from \"react\";\nimport \"./App.css\";\n\nclass Home extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    this.getCoronaVirusData();\n    setInterval(this.getCoronaVirusData(), 60000); // Time in milliseconds\n  }\n\n  getCoronaVirusData = async () => {\n    let result = await fetch(\n      \"https://thevirustracker.com/free-api?global=stats\"\n    );\n    console.log(\"the result is\", result);\n    let resultJson = await result.json();\n    console.log(\"the json result is\", resultJson);\n\n    this.setState({\n      results: resultJson.results[0]\n    });\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Corona Cases</p>\n\n          {this.state.results && this.state.results.total_cases && (\n            <div>\n              <h4>Total Cases</h4>\n              <hr></hr>\n              <h4>{this.state.results.total_cases}</h4>\n            </div>\n          )}\n\n          {this.state.results && this.state.results.total_deaths && (\n            <div>\n              <h4>Total Deaths</h4>\n              <hr></hr>\n              <h4>{this.state.results.total_deaths}</h4>\n            </div>\n          )}\n\n          {this.state.results && this.state.results.total_new_cases_today && (\n            <div>\n              <h4>Total New Cases Today</h4>\n              <hr></hr>\n              <h4>{this.state.results.total_new_cases_today}</h4>\n            </div>\n          )}\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Map from \"./Map.js\"\nimport Check from \"./Check.js\"\nimport Home from \"./Home.js\"\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"Nav-header\">\n            <div className=\"Nav-item\">\n              <Link to=\"/\">Home</Link>\n            </div>\n            <div className=\"Nav-item\">\n              <Link to=\"/Check\">Check Symptoms</Link>\n            </div>\n            <div className=\"Nav-item\">\n              <Link to=\"/Map\">Map</Link>\n            </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/map\">\n            <Map />\n          </Route>\n          <Route path=\"/check\">\n            <Check />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}"],"sourceRoot":""}